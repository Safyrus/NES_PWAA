<!-- ========= -->
<!-- Constants -->
<!-- ========= -->

<const:SPD_NORMAL,2>

<!-------- Flag constants -------->

<const:FLAG_SPE_0,0>
<const:FLAG_SPE_1,1>
<const:FLAG_SPE_2,2>
<const:FLAG_CURSOR_INFO,3>

<!-------- Colors constants -------->
<const:WHITE,0>
<const:RED,1>
<const:BLUE,2>
<const:GREEN,3>

<!-------- Background constants -------->
<const:BKG_EMPTY,0>
<const:BKG_INTRO,4>
<const:BKG_MAIN_MENU,5>
<const:BKG_TEXT_MENU,6>
<const:BKG_IMAGE_MENU,7>
<const:BKG_MUSIC_MENU,8>
<const:BKG_PROJECT_MENU,9>
<const:BKG_TAG_MENU_1,10>
<const:BKG_TAG_MENU_2,11>
<const:BKG_TAG_MENU_3,12>
<const:BKG_TAG_MENU_4,13>
<const:BKG_PROJECT,14>
<const:BKG_PROJECT_ASM,15>
<const:BKG_PROJECT_C,16>
<const:BKG_PROJECT_CFG,17>
<const:BKG_PROJECT_DATA,18>
<const:BKG_PROJECT_DOC,19>
<const:BKG_PROJECT_LINK,20>
<const:BKG_PROJECT_LUA,21>
<const:BKG_PROJECT_MAKE,22>
<const:BKG_PROJECT_NES,23>
<const:BKG_PROJECT_PY,24>
<const:BKG_TXT_1,25>
<const:BKG_TXT_2,26>
<const:BKG_TXT_3,27>
<const:BKG_TXT_4,28>
<const:BKG_NAMELIST,29>
<const:BKG_1ST_CHR,30>

<!-------- Character constants -------->
<const:CHR_NONE,0>
<const:ANI_NONE,0>

<const:CHR_ROBOT,0>

<!-------- "Robot" Animation constants -------->
<const:ANI_ROBOT_OFF,10>
<const:ANI_ROBOT_BOOTING,9>
<const:ANI_ROBOT_SMILE_IDLE,1>
<const:ANI_ROBOT_SMILE_TALK,2>
<const:ANI_ROBOT_NEUTRAL_IDLE,3>
<const:ANI_ROBOT_NEUTRAL_TALK,4>
<const:ANI_ROBOT_SAD_IDLE,5>
<const:ANI_ROBOT_SAD_TALK,6>
<const:ANI_ROBOT_SIGH_IDLE,7>
<const:ANI_ROBOT_SIGH_TALK,8>
<const:ANI_ROBOT_TEACH_SMILE_IDLE,11>
<const:ANI_ROBOT_TEACH_SMILE_TALK,12>
<const:ANI_ROBOT_TEACH_NEUTRAL_IDLE,13>
<const:ANI_ROBOT_TEACH_NEUTRAL_TALK,14>
<const:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE,15>
<const:ANI_ROBOT_LOOKRIGHT_SMILE_TALK,16>

<!-------- Name constants -------->
<const:NAM_NONE,0>
<const:NAM_???,1>
<const:NAM_SAFYRUS,2>
<const:NAM_A,3>
<const:NAM_B,4>

<!-------- Music constants -------->
<const:MUS_INTRO,0>

<!-------- Sound constants -------->
<const:SND_BOOT,0>

<!-------- Bip constants -------->
<const:BIP_SAFYRUS,0>

<!-------- Event constants -------->
<const:EVT_CLICK,5>
<label:START>
<!-- ====================== -->
<!-- Chapter: Introduction  -->
<!-- Section: Build by user -->
<!-- ====================== -->


<label:INTRO_BUILD>
<!-------- INTRO ANIMATION -------->

<!-- make the screen black -->
<background:BKG_EMPTY><hidetextbox><speed:SPD_NORMAL><fade>
<jump:DEBUG>

<!-- Prepare drawing the background and Safyrus -->
<background:BKG_INTRO>
<character:CHR_ROBOT><animation:ANI_ROBOT_OFF>

<!-- Start the music and fade in -->
<music:MUS_INTRO><fade>

<!-- Robot booting up animation -->
<wait:30><sound:SND_BOOT><character:CHR_ROBOT><animation:ANI_ROBOT_BOOTING>
<wait:127><wait:127><wait:100>



<!-------- INTRO TEXT -------->

<!-- Setup dialog -->
<name:NAM_SAFYRUS><bip:BIP_SAFYRUS><hidetextbox>
<animation:ANI_ROBOT_SMILE_TALK>

Hi! <wait:30>And welcome to the<b>
next part of the tutorial!
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

It seems you have built<b>
the game yourself.<wait:30><b>
Well done!
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

I hope it was without too<b>
many problems.<b><wait:30><animation:ANI_ROBOT_SAD_TALK>
(if not,<wait:15>sry I couldn't help)
<animation:ANI_ROBOT_SAD_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

Anyway,<wait:15> let's now talk about<b>
what you here for.<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1>

<!-- switch to introduction text -->
<!-- ========================== -->
<!-- Chapter: Introduction      -->
<!-- Section: Not build by user -->
<!-- ========================== -->


<jump:INTRO_NOT_BUILD_END> <!--skip for now-->

<label:INTRO_NOT_BUILD>
<!-------- INTRO ANIMATION -------->

<!-- make the screen black -->
<background:BKG_EMPTY><fade><hidetextbox>

<!-- Prepare drawing the background and Safyrus -->
<background:BKG_INTRO>
<character:CHR_ROBOT><animation:ANI_ROBOT_OFF>

<!-- Start the music and fade in -->
<music:MUS_INTRO><fade>

<!-- Robot booting up animation -->
<wait:30><sound:SND_BOOT><character:CHR_ROBOT><animation:ANI_ROBOT_BOOTING>
<wait:255>


<!-------- INTRO TEXT -------->

<!-- Setup dialog -->
<name:NAM_SAFYRUS><bip:BIP_SAFYRUS><hidetextbox>
<animation:ANI_ROBOT_SMILE_TALK>

Hi!<wait:30>And welcome to the<b>
next part of the tuto--<b>
<animation:ANI_ROBOT_NEUTRAL_IDLE><wait:30><animation:ANI_ROBOT_NEUTRAL_TALK>
Wait...
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

It seems you haven't built<b>
this version of the game<b>
yourself.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

Or you have downloaded it<b>
from a nightly build ?
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_SIGH_TALK><wait:1>

Well, do what you want.<b>
I can't really stop you.
<animation:ANI_ROBOT_SIGH_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

But if you want to build a<b>
game using this engine
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

I HIGHLY suggest following<b>
the tutorial on the project<b>
GitHub first!
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

If you haven't installed<b>
this project, you will not<b>
be able to create a game.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

If you still wish to<b>
learn about how to use this<b>
engine, then...
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><animation:ANI_ROBOT_NEUTRAL_TALK><wait:1>

Let's just pretend you have<b>
done everything correctly<b>
at this point, OK ?<p>
<animation:ANI_ROBOT_SIGH_IDLE><p><wait:1>

<label:INTRO_NOT_BUILD_END>
<!-- switch to introduction text -->
<!-- =========================== -->
<!-- Chapter: Introduction       -->
<!-- Section: Short Introduction -->
<!-- =========================== -->


<!-------- INTRO TEXT -------->

Welcome to the second part<b>
of the tutorial!
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

This part is about how to<b>
use the engine.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

But first!<wait:30> A little<b>
intro about it.<wait:30> Then we<b>
will learn how to use it.
<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE><p><wait:1>



<!-------- ENGINE PARAGRAPH -------->

<color:RED>
<b>
    -==# The engine #==-    <b>
<p><name:NAM_SAFYRUS><color:WHITE><animation:ANI_ROBOT_SMILE_TALK>

This engine was firstly<b>
design to demake the first<b>
ace attorney on the NES.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

(you may already know that)
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

And because all the logic of<b>
the game was dictated by the<b>
text.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

I design the code to work<b>
without needing to know what<b>
the content of the game is.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

(all data still need to<b>
respect a specific<b>
structure thought)
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

So,<wait:15> with a little of<b>
extra efforts.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

And by compiling the text,<wait:15><b>
images<wait:15> & audio<wait:15> in a format<b>
that the engine understand.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

Once we give all this data<b>
to the engine,<wait:15> we have<b>
a working game!
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

This engine is,<wait:15> to over-<b>
simplified things,<wait:15><b>
RenPy but for the NES.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

Note that we are still on<b>
the NES and limitations<b>
still apply.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

(mainly graphical and audio)
<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE><p><wait:1>



<!-------- DISCLAIMER PARAGRAPH -------->

<color:RED>
<b>
   /!\ Important Note /!\   <b>
<p><name:NAM_SAFYRUS><color:WHITE><animation:ANI_ROBOT_SMILE_TALK>

The engine is not fully<b>
finished yet!
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

For example, saves are not<b>
present yet.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

I'm working on that and<b>
hope to finished it soon.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

Oh and also, there is still<b>
a lot of bugs that I also<b>
hope to patch.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

So you've been warn.
<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE><p><wait:1>



<!-------- TYPE OF GAMES PARAGRAPH -------->

<color:RED>
<b>
  -==# Type of games #==-  <b>
<p><name:NAM_SAFYRUS><color:WHITE><animation:ANI_ROBOT_SMILE_TALK>

Just to be sure,<b>
what type of game do you<b>
want to do with this engine?
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1>

<!-- Choice -->
<act>
<jump:act_typeOfGame_1,0,1>A Visual Novel<b>
<jump:act_typeOfGame_1,0,1>A game around dialogs<b>
<jump:act_typeOfGame_2,0,0>Another type of game<b>

<!-- Choice 1 or 2 -->
<label:act_typeOfGame_1><fp><animation:ANI_ROBOT_SMILE_TALK>
Great!
<animation:ANI_ROBOT_SMILE_IDLE><p><jump:act_typeOfGame_end>

<!-- Choice 3 -->
<label:act_typeOfGame_2><fp>
<animation:ANI_ROBOT_SAD_TALK>Ah.<animation:ANI_ROBOT_SAD_IDLE><wait:20>.<wait:20>.<wait:20><b>
<animation:ANI_ROBOT_SAD_TALK>Well.<animation:ANI_ROBOT_SAD_IDLE><wait:20>.<wait:20>.<wait:60><b>
<animation:ANI_ROBOT_SAD_TALK>You may want to reconsider.<animation:ANI_ROBOT_SAD_IDLE><p>

<!-- End of choice -->
<label:act_typeOfGame_end>


This engine was design to<b>
run visual novels type of<b>
game (like Ace Attorney).
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:1><animation:ANI_ROBOT_NEUTRAL_TALK>

Making other type of games<b>
may not be possible
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:1><animation:ANI_ROBOT_NEUTRAL_TALK>

unless you edit the source<b>
code and make heavy<b>
modifications.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:1><animation:ANI_ROBOT_NEUTRAL_TALK>

BUT!
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:1><animation:ANI_ROBOT_NEUTRAL_TALK>

Game with a strong focus on<b>
text and UI may still be<b>
possible.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:1><animation:ANI_ROBOT_NEUTRAL_TALK>

Maybe a Layton like game<b>
is possible without or with<b>
very small modifications.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>


OK,<wait:15> I think that's<b>
everything.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1><animation:ANI_ROBOT_SMILE_TALK>

Now let's finally learn how<b>
to use this 8-bit engine!
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:1>

<!-- switch to menu -->
<name:NAM_NONE><hidetextbox><fade>

<!-- Display Menu -->
<label:DEBUG>
<label:mainmenu>
<background:BKG_MAIN_MENU><character:CHR_NONE><animation:ANI_NONE>
<fade>

<!-- One Time dialog about the cursor -->

<jump:cursor_info_end,1,1,FLAG_CURSOR_INFO>
<hidetextbox><wait:5>

Note:<b>
You can choose what to learn<b>
using the cursor<p><wait:5>

Use the D-pad to move it<b>
and press A to validate<b>
your choice.<p><wait:5>

<set:FLAG_CURSOR_INFO>
<hidetextbox>
<label:cursor_info_end>


<!-- Main menu with cursor choice -->

<!-- <event:EVT_ACT_RETURN> : use for going back from investigation to last act. No use for it here -->
<save>
<background:BKG_MAIN_MENU> <!-- Redraw the menu (because when cliking, the game does not redraw stuff ?) -->
<event:EVT_CLICK>
<box:0,20,0,4,1><jump:click_mainmenu_sea,0,1>
<box:0,0,5,3,1><jump:click_mainmenu_cloud,0,1>
<box:28,0,4,3,1><jump:click_mainmenu_cloud,0,1>
<box:6,2,20,4,1><jump:click_mainmenu_text,0,1>
<box:3,8,11,4,1><jump:click_mainmenu_project,0,1>
<box:18,8,11,4,1><jump:click_mainmenu_dialog,0,1>
<box:3,14,11,4,1><jump:click_mainmenu_image,0,1>
<box:18,14,11,4,0><jump:click_mainmenu_sound,0,1>

<!-- Add fade before any jump -->

<label:click_mainmenu_project>
<fade>
<jump:projectmenu>

<label:click_mainmenu_dialog>
<fade>
<jump:textmenu>

<label:click_mainmenu_image>
<fade>
<jump:imagemenu>

<label:click_mainmenu_sound>
<fade>
<jump:musicmenu>

<label:click_mainmenu_sea>
<hidetextbox>
Yes,<wait:30><b>
that's the sea.<p>
<hidetextbox>
<return>

<label:click_mainmenu_cloud>
<hidetextbox>
Yes,<wait:30><b>
that's a cloud.<p>
<hidetextbox>
<return>

<label:click_mainmenu_text>
<hidetextbox>
That's not a button,<wait:30><b>
It's just a text.<p>
<hidetextbox>
<return>
<label:projectmenu>
<background:BKG_PROJECT_MENU><character:CHR_NONE><animation:ANI_NONE>
<fade>

<!-- Project menu with cursor choice -->

<event:EVT_CLICK>
<box:3,8,11,3,1><jump:click_projectmenu_folder,0,1>
<box:18,8,11,3,1><jump:click_projectmenu_link,0,1>
<box:3,12,11,3,1><jump:click_projectmenu_return,0,1>
<box:18,12,11,3,0><jump:click_projectmenu_makefile,0,1>

<!-- Add fade before any jump -->

<label:click_projectmenu_folder>
<fade>
<jump:project_folder>

<label:click_projectmenu_link>
<fade>
<jump:project_link>

<label:click_projectmenu_makefile>
<fade>
<jump:project_makefile>

<label:click_projectmenu_return>
<fade>
<jump:mainmenu>
<label:project_folder>
<background:BKG_PROJECT><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_TEACH_SMILE_TALK>
It may be important for you<b>
to know how the project is<b>
structured
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
And know where to put<b>
your data
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>


<!-------------------------------->

<name:NAM_NONE><background:BKG_PROJECT_ASM>
<b><color:RED>
       | asm folder |<b>
<p><color:WHITE><wait:5>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
This is where the <color:RED>assembly<b>
code<color:WHITE> of the game reside.
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
You don't need to know<b>
anything about it unless<b>
you want to modify it.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
In that case,<b>
maybe go look at the<b>
documentation first.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
But!
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
There is 1 line in 1 file<b>
that may be important.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
The last line of the <color:GREEN>cr0.asm<color:WHITE><b>
file include the CHR file<b>
<color:BLUE>(graphic data of the game).
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><color:WHITE><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
The name of the CHR file<b>
to include should be<b>
'your_game_name.chr'.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
With 'your_game_name'<b>
replaced by the game name<b>
specified in the .cfg file
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>
<animation:ANI_ROBOT_SMILE_IDLE>

<!-------------------------------->

<name:NAM_NONE><background:BKG_PROJECT_CFG>
<b><color:RED>
       | cfg folder |<b>
<p><color:WHITE><wait:5>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
This is where the config<b>
file is located.
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
<color:BLUE>(and also config files for<b>
the documentation, but we<b>
don't care about that).
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5><color:WHITE>

<animation:ANI_ROBOT_SMILE_TALK>
You may already know<b>
about it if you have<b>
compiled the game.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
In short: you can config the<b>
path of anything necessary<b>
to compile the game.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>


<!-------------------------------->

<name:NAM_NONE><background:BKG_PROJECT_DATA>
<b><color:RED>
       | data folder |<b>
<p><color:WHITE><wait:5>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
This may be the most<b>
important folder to you.
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
This is where all the<b>
source data of the game<b>
are store.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
You can structure it<b>
however you want
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
But for that, you need to<b>
change corresponding paths<b>
in the config file
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
You must have a folder with<b>
all of your text data
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
And precise an output file<b>
for your text,
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
1 JSON file for all photos,<b>
and 4 JSON files for all<b>
animations
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
<color:BLUE>(1 file per PRG region).
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5><color:WHITE>

<animation:ANI_ROBOT_SMILE_TALK>
What these files are is<b>
better explained in their<b>
own part of the tutorial.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Note that some files must<b>
remain where there are.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
These files are:<b>
- 'empty.png'<b>
- 'empty_chr.png'
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
- 'empty_photo.png'<b>
- 'FONT.chr' <color:BLUE>(you can edit<b>
that one)
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5><color:WHITE>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Note: music data are stored<b>
here but need to be<b>
exported via FamiStudio
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
<color:BLUE>(See the sound part of the<b>
tutorial for more info)
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5><color:WHITE>
<animation:ANI_ROBOT_SMILE_IDLE>

<!-------------------------------->

<name:NAM_NONE><background:BKG_PROJECT_DOC>
<b><color:RED>
       | doc folder |<b>
<p><color:WHITE><wait:5>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
This folder contain the<b>
generated documentation<b>
about the code
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
and some markdown files<b>
describing some code aspect.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
If you want more information<b>
about how the code works,<b>
it's here.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<!-------------------------------->

<name:NAM_NONE><background:BKG_PROJECT>
<b><color:RED>
        | py & c folder |<b>
<p><color:WHITE><wait:5>

<name:NAM_SAFYRUS>
<background:BKG_PROJECT_PY><animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
The py folder contain all<b>
Python scripts use to<b>
convert data into nes data
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<background:BKG_PROJECT_C><animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
The c folder contain a C<b>
program use by python<b>
scripts
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
You don't need to look at<b>
those if you don't need to
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<!-------------------------------->

<name:NAM_NONE><background:BKG_PROJECT_LUA>
<b><color:RED>
       | lua folder |<b>
<p><color:WHITE><wait:5>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
This folder contain some<b>
lua scripts that can be<b>
used by the Mesen emulator
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
It add additional info on<b>
what's going on<b>
during gameplay.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<!-------------------------------->

<background:BKG_PROJECT>
<animation:ANI_ROBOT_SMILE_TALK>
And that's all the<b>
notable folders
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE><hidetextbox><fade>
<jump:projectmenu>
<label:project_link>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade>
<hidetextbox>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_SMILE_TALK>
The link.cfg is responsible<b>
for indicating where in the<b>
cartridge data must be put.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
You shouldn't need to edit<b>
this file in normal cases.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
But if you get a message<b>
like for example:<b>
<color:RED>`Warning: link.cfg:20:
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Segment 'TXT_BNK' overflows<b>
memory area 'BNK_TXT'<b>
by 1024 bytes`<color:WHITE>
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
That's mean that your data<b>
are too big to fit inside<b>
the designated segment.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
In this case, you have 1 KB<b>
of text that does not fit.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
There are 2 solutions<b>
to this problem:
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
1.Remove some of your data.<b><animation:ANI_ROBOT_TEACH_SMILE_IDLE><wait:60><animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Not that good<b>
of a solution
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
2.Edit the link.cfg file.<b><animation:ANI_ROBOT_TEACH_SMILE_IDLE><wait:60><animation:ANI_ROBOT_TEACH_SMILE_TALK>
Tell it that<b>
you have enough space
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
In the case you choose<b>
option 2, this is you how<b>
to do it:
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
First, go to the line<b>
indicated<b>
<color:BLUE>(20 in this case)<color:WHITE>
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
Then, change the number<b>
after the <color:GREEN>`size =`<color:WHITE><b>
to a bigger number.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
The number must be written<b>
in hexadecimal and should<b>
be a multiple of $2000.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Lets supposed it was $62000,<b>
and that we add 8 KB<b>
<color:BLUE>($2000 in hex)<color:WHITE>
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
That will give us $64000.<b>
Enought space to<b>
it the data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
But you are not done yet!
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Because now the size of all<b>
segments add up to more of<b>
the cartridge space.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
You must now remove the same<b>
amount of space you added<b>
from other segment.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Let's suppose than you do<b>
not have many images
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
and there is still space<b>
in the BNK_IMG segment.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
Then we can replace the old<b>
value of $84000 by $82000.<b>
<color:BLUE>(a difference of 8 KB)<color:WHITE>
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Of course, if all your data<b>
does not fit in 1 MB
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
(not counting the CHR space<b>
of 1 MB that is<b>
filled for you)
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Then you just out of space<b>
and must remove something.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
And that's the basics<b>
on the link.cfg file.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE><hidetextbox><fade>
<jump:projectmenu>

<label:project_makefile>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_SMILE_TALK>
This file contains commands<b>
to 'make' this project.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Normally, you should not<b>
have to edit this file.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
These not much really to say<b>
apart list the available<b>
commands.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
You should now the 2 most<b>
important one:
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make resource'<color:WHITE><b>
Convert the resources like<b>
text & images to data,
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
but not musics<b><color:BLUE>
(see the sound part of the<b>
tutorial for that)<color:WHITE>
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make'<color:WHITE><b>
Make the NES file<b>
from assembly and data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
There are others less<b>
important ones but that can<b>
still be usefull to know:
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make (game name).nes'<color:WHITE><b>
Only make the NES file with<b>
a NES 2.0 header.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>
<animation:ANI_ROBOT_SMILE_TALK>
The '(game name)' part must<b>
be replaced by the real game<b>
name (defined in cfg file).
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make (game name)_ines1.nes'<color:WHITE><b>
Same as before but make the<b>
NES file with 1.0 header.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make clean'<color:WHITE><b>
Do the following<b>
3 commands.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make clean_bin'<color:WHITE><b>
Clean the temporary binary<b>
files generated.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make clean_data'<color:WHITE><b>
Clean the generated<b>
assembly data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make clean_tmp'<color:WHITE><b>
Clean other temporary files.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make run'<color:WHITE><b>
Shortcut for running<b>
the game.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make text'<color:WHITE><b>
Convert your text<b>
to assembly data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make img'<color:WHITE><b>
Convert your images<b>
to assembly data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make photo'<color:WHITE><b>
Convert your photos/<b>
evidences to assembly data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make anim'<color:WHITE><b>
Convert your animations<b>
to assembly data.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make hex'<color:WHITE><b>
Dump the NES file into<b>
hexadecimal to a text file.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>make visual'<color:WHITE><b>
Dump the NES file<b>
to an image.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:GREEN>'make gendoc'<color:WHITE><b>
Generate the documentation<b>
of the code.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
And that's it about<b>
the Makefile.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE><hidetextbox><fade>
<jump:projectmenu>

<label:textmenu>
<background:BKG_TEXT_MENU><character:CHR_NONE><animation:ANI_NONE>
<fade>

<!-- Text menu with cursor choice -->

<event:EVT_CLICK>
<box:3,8,11,3,1><jump:click_textmenu_intro,0,1>
<box:18,8,11,3,1><jump:click_textmenu_tags,0,1>
<box:3,12,11,3,1><jump:click_textmenu_font,0,1>
<box:18,12,11,3,1><jump:click_textmenu_cfg_file,0,1>
<box:3,16,11,3,0><jump:click_textmenu_return,0,1>

<!-- Add fade before any jump -->

<label:click_textmenu_intro>
<fade>
<jump:text_intro>

<label:click_textmenu_tags>
<fade>
<jump:text_tags_1>

<label:click_textmenu_font>
<fade>
<jump:text_font>

<label:click_textmenu_cfg_file>
<fade>
<jump:text_cfg_file>

<label:click_textmenu_return>
<fade>
<jump:mainmenu>
<label:text_intro>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>

<color:RED><b>
   == Write text data ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS>
<animation:ANI_ROBOT_SMILE_TALK>
Writing text data for your<b>
game is not difficult,<b>
but to explain it...
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Well I think an example<b>
will better teach you<b>
how to do it.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Let's say you want to<b>
write this simple dialog<b>
between 2 characters:
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<character:CHR_NONE><animation:ANI_NONE>
<background:BKG_TXT_1>
<hidetextbox><p><wait:5>
<hidetextbox>
<!--
A:
Hey!
B:
Ho, hi!
How you'r doing?
A:
Great and you?
B:
Great too!
A:
Do you still have it?
B:
The... Oh this, yeah.
Here you go.
Just be careful with it.
A:
Nice, I won't bother
you any longer.
Good luck!
B:
Good luck to you too.
-->


You may start by writing<b>
this into a plain text file<p><wait:5>
and indicate the path<b>
to the folder containing it<b>
to the project<p><wait:5>
('data/text' by default).<p><wait:5>

If you feed the project<b>
with this text data,<p><wait:5>
it will not complain and<b>
correctly compile the game.<p><wait:5>

But,<b>
as soon as the game start<p><wait:5>
all this plain text<b>
will be displayed one line<b>
of the dialog box.<p><wait:5>

And very likely cause bug<b>
and crash the game<p><wait:5>
(because the dialog<b>
go out of the screen).<p><wait:5>

The plain text will look<b>
something like this:<p><wait:5>

<name:NAM_NONE>
A: Hey!B: Ho, hi! How you'r doing?A: Great and you?B: Great too!A: Do you still have it?B: The... Oh this, yeah. Here you go.Just be careful with it.A: Nice, I won't bother you any longer.Good luck!B: Good luck to you too.
<p><wait:5>

<name:NAM_SAFYRUS>
The project does not know<b>
anything about our text<b>
apart from "this is text".<p><wait:5>

To indicate that we want<b>
new lines, multiple dialog<b>
box, etc. We need "tags".<p><wait:5>

<name:NAM_NONE>
<color:RED><b>
         == Tags ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS>
Tags are written by using<b>
angle bracket like this:<b>
<color:GREEN><<>tag><color:WHITE><p><wait:5>

Each tag have a specific<b>
name and purpose.<p><wait:5>
Each of them is explained<b>
in the tag section.<p><wait:5>

But for now, let's start by<b>
adding <color:GREEN><<>b><color:WHITE> tags to the<b>
text. (b like "break line")<p><wait:5>

This tag act as a<b>
new line character.<p><wait:5>
Each time it is encounter<b>
the text will jump to the<b>
start of the next line.<p><wait:5>

<background:BKG_TXT_2>
<hidetextbox><p><wait:5>
<hidetextbox>
<!--
A:
Hey!
B:
Ho, hi!<b>
How you'r doing?
A:
Great and you?
B:
Great too!
A:
Do you still have it?
B:
The... Oh this, yeah.<b>
Here you go.<b>
Just be careful with it.
A:
Nice, I won't bother<b>
you any longer.<b>
Good luck!
B:
Good luck to you too.
-->

We still need multiple<b>
dialog box and not just<b>
one with all our text.<p><wait:5>

For that, we will use the<b>
<color:GREEN><<>p><color:WHITE> tag (like page/press).<p><wait:5>

This tag indicates that we<b>
have reached the end<b>
of the dialog box<p><wait:5>

and that the user need to<b>
press continue to go<b>
to the next one.<p><wait:5>

Putting them where we want<b>
to separate our text,<b>
this look like this:<p><wait:5>

<background:BKG_TXT_3>
<hidetextbox><p><wait:5>
<hidetextbox>
<!--
A:
Hey!<p>
B:
Ho, hi!<b>
How you'r doing?<p>
A:
Great and you?<p>
B:
Great too!<p>
A:
Do you still have it?<p>
B:
The... Oh this, yeah.<b>
Here you go.<b>
Just be careful with it.<p>
A:
Nice, I won't bother<b>
you any longer.<b>
Good luck!<p>
B:
Good luck to you too.<p>
-->

Now the game will correctly<b>
display the first dialog box<b>
and wait for an input.<p><wait:5>

After pressing continue,<b>
the second dialog box will<b>
appear and so one.<p><wait:5>

Of course this is only the<b>
basics. Other tags exist to<b>
do more complicated stuff.<p><wait:5>

But for now, we will add<b>
<color:GREEN><<>label:end><<>jump:end><color:WHITE> at<b>
the end of our text data.<p><wait:5>

If you want details, go to<b>
the label tag and jump tag<b>
section,<p><wait:5>
but for short,<b>
it soft lock the game<b>
and make it not crash.<p><wait:5>

<name:NAM_NONE>
<color:RED><b>
    == Tags arguments ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS>
Tags can also take<b>
arguments.<p><wait:5>
For example, if we want to<b>
add names to our characters,<b>
we can use the <color:GREEN><<>name><color:WHITE> tag.<p><wait:5>

<background:BKG_TXT_4>
<hidetextbox><p><wait:5>
<hidetextbox>
<!--
<name:NAM_A>
Hey!<p>
<name:NAM_B>
Ho, hi!<b>
How you'r doing?<p>
<name:NAM_A>
Great and you?<p>
<name:NAM_B>
Great too!<p>
<name:NAM_A>
Do you still have it?<p>
<name:NAM_B>
The... Oh this, yeah.<b>
Here you go.<b>
Just be careful with it.<p>
<name:NAM_A>
Nice, I won't bother<b>
you any longer.<b>
Good luck!<p>
<name:NAM_B>
Good luck to you too.<p>
-->

This will display a name<b>
at the bottom left<b>
of the dialog box.<p><wait:5>

The constant/number<b>
specified the name<b>
to use from a list.<p><wait:5>
See the <color:GREEN><<>name><color:WHITE> tag section<b>
to learn how to edit them.<p><wait:5>

Now the text when displayed<b>
look like this:<p><wait:5>

<!---------------->
<name:NAM_A>
Hey!<p>
<name:NAM_B>
Ho, hi!<b>
How you'r doing?<p>
<name:NAM_A>
Great and you?<p>
<name:NAM_B>
Great too!<p>
<name:NAM_A>
Do you still have it?<p>
<name:NAM_B>
The... Oh this, yeah.<b>
Here you go.<b>
Just be careful with it.<p>
<name:NAM_A>
Nice, I won't bother<b>
you any longer.<b>
Good luck!<p>
<name:NAM_B>
Good luck to you too.<p>
<!---------------->

<wait:5><name:NAM_NONE>
<color:RED><b>
       == Comments ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS>
New lines are ignored,<p><wait:5>
so don't hesitate to use<b>
them to add space<b>
between dialogs<p><wait:5>
and make it more readable<b>
for you and others.<p><wait:5>

There is also a special tag<b>
called a comment.<p><wait:5>

It starts with <color:GREEN><<>!--<color:WHITE><b>
and end with <color:GREEN>--><color:WHITE>.<p><wait:5>
Everything in between<b>
is ignored by the game.<p><wait:5>

It's very useful to annotate<b>
your text and to tell you or<b>
other info about your text.<p><wait:5>

For example: "What is this<b>
section about?", "Why is<b>
this chain of tag use for?"<p><wait:5>
or "Things to add there<b>
in the future".<p><wait:5>

Anyway, that's the basics.<b>
Don't hesitate to go to each<b>
tag section to learn more.<p><wait:5>

<name:NAM_NONE><hidetextbox><fade>
<jump:textmenu>
<label:text_cfg_file>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>

<name:NAM_NONE>
<color:RED><b>
     == Text config ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
In the config file<b>
(cfg/make_default.cfg),
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
you only need to specify<b>
a folder where all<b>
of your text is located
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
and an output text file<b>
where all of your text<b>
will be merged.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
        == Folder ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
For now, all file in the<b>
input folder will be sorted<b>
and merge alphabetically.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
This mean that if you have<b>
2 files: <color:GREEN>a.txt<color:WHITE> & <color:GREEN>b.txt<color:WHITE>,
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
the content of <color:GREEN>b.txt<color:WHITE> will<b>
be put after the<b>
content of <color:GREEN>a.txt<color:WHITE>.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The order of your text<b>
matters because the game<b>
will start at the first one.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Note that the sub folders<b>
names does not count when<b>
sorting alphabetically.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
To be sure that all of your<b>
text files are in the order<b>
you want,
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>
<animation:ANI_ROBOT_SMILE_TALK>
there are multiple<b>
solutions:
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
- name all your files with<b>
a leading number<b>
(with leading 0)
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
- name the first file <color:GREEN>0.txt<color:WHITE><b>
and use <color:GREEN>label<color:WHITE> and <color:GREEN>jump<color:WHITE><b>
tags to go to other files
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
- just use one file<b>
(not recommended)
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
        == Output ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
For the output file,<b>
just choose a file name<b>
that does not exist.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
If the file exist it will<b>
be replaced by whatever<b>
the program output.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE><hidetextbox><fade>
<jump:textmenu>
<label:text_font>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>

<color:RED><b>
         == Font ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
All fonts of the game are<b>
located in "data/FONT.chr".
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
To edit them, use YYCHR or<b>
another software than can<b>
do the same thing.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
       == Char Set ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
All font use the same<b>
character sets.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
There are 128 unique<b>
characters.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The first 32 are<b>
control characters.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The 96 others are<b>
printable characters.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
 == Alignment and Index ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
1 Bank (256 tiles or 4 KB)<b>
store 2 fonts.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The first on the upper half<b>
(128 first tiles)
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
and the second on the<b>
bottom half<b>
(128 last tiles).
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
When using the `font` tag,<b>
you must specify<b>
the index of the font.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The index is the bank number<b>
times 2, plus 1 if the font<b>
is store in the bottom half.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
For example, if the FONT.chr<b>
is the default one,
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
font 0 is ASCII.<b>
font 2 is Japanese hiragana.<b>
font 3 is Japanese katakana.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
        == Font 1 ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
Font 1 is special and does<b>
not represent a font.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
It is used to store tiles<b>
for the dialog box, cursor<b>
and different names.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
If you use it,<b>
it will draw these<b>
graphic tiles.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
   == Adding more font ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
You can add more font by<b>
adding banks to the<b>
FONT.chr file.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
You can have a maximum<b>
of 128 font (from 0 to 127).
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Note that if your using<b>
YYCHR, it cannot increase<b>
the file size.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
For that, you can either:<b>
- use another software
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
- use one of the python<b>
  script found in "py/chr"<b>
- google it
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<name:NAM_NONE>
<color:RED><b>
     == Last Notes ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
Because control character<b>
will not be print, you can<b>
draw anything you want here.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<name:NAM_NONE><hidetextbox><fade>
<jump:textmenu>
<label:text_tags_1>
<background:BKG_TAG_MENU_1><character:CHR_NONE><animation:ANI_NONE>
<fade>


<!-- Tag menu 1 with cursor choice -->

<event:EVT_CLICK>
<box:2,8,9,3,1><jump:click_tagmenu1_comment,0,1>
<box:12,8,8,3,1><jump:click_tagmenu1_b,0,1>
<box:21,8,9,3,1><jump:click_tagmenu1_p_fp,0,1>
<box:2,12,9,3,1><jump:click_tagmenu1_speed,0,1>
<box:12,12,8,3,1><jump:click_tagmenu1_wait,0,1>
<box:21,12,9,3,1><jump:click_tagmenu1_color,0,1>
<box:2,16,9,3,1><jump:click_tagmenu1_const,0,1>
<box:12,16,8,3,1><jump:click_tagmenu1_return,0,1>
<box:21,16,9,3,1><jump:click_tagmenu1_name,0,1>
<box:2,2,4,4,1><jump:click_tagmenu1_left,0,1>
<box:26,2,4,4,0><jump:click_tagmenu1_right,0,1>

<!-- Add fade before any jump -->

<label:click_tagmenu1_comment>
<fade>
<jump:tag_comment>

<label:click_tagmenu1_b>
<fade>
<jump:tag_b>

<label:click_tagmenu1_p_fp>
<fade>
<jump:tag_p_fp>

<label:click_tagmenu1_speed>
<fade>
<jump:tag_speed>

<label:click_tagmenu1_wait>
<fade>
<jump:tag_wait>

<label:click_tagmenu1_color>
<fade>
<jump:tag_color>

<label:click_tagmenu1_const>
<fade>
<jump:tag_const>

<label:click_tagmenu1_name>
<fade>
<jump:tag_name>

<label:click_tagmenu1_left>
<fade>
<jump:text_tags_4>

<label:click_tagmenu1_right>
<fade>
<jump:text_tags_2>

<label:click_tagmenu1_return>
<fade>
<jump:textmenu>
<label:text_tags_2>
<background:BKG_TAG_MENU_2><character:CHR_NONE><animation:ANI_NONE>
<fade>


<!-- Tag menu 2 with cursor choice -->

<event:EVT_CLICK>
<box:2,8,13,3,1><jump:click_tagmenu2_background,0,1>
<box:17,8,13,3,1><jump:click_tagmenu2_hidetextbox,0,1>
<box:2,12,28,3,1><jump:click_tagmenu2_chr_ani,0,1>
<box:2,16,9,3,1><jump:click_tagmenu2_font,0,1>
<box:12,16,8,3,1><jump:click_tagmenu2_return,0,1>
<box:21,16,9,3,1><jump:click_tagmenu2_photo,0,1>
<box:2,2,4,4,1><jump:click_tagmenu2_left,0,1>
<box:26,2,4,4,0><jump:click_tagmenu2_right,0,1>

<!-- Add fade before any jump -->

<label:click_tagmenu2_background>
<fade>
<jump:tag_todo_2>

<label:click_tagmenu2_hidetextbox>
<fade>
<jump:tag_todo_2>

<label:click_tagmenu2_chr_ani>
<fade>
<jump:tag_todo_2>

<label:click_tagmenu2_font>
<fade>
<jump:tag_todo_2>

<label:click_tagmenu2_photo>
<fade>
<jump:tag_todo_2>

<label:click_tagmenu2_left>
<fade>
<jump:text_tags_1>

<label:click_tagmenu2_right>
<fade>
<jump:text_tags_3>

<label:click_tagmenu2_return>
<fade>
<jump:textmenu>
<label:text_tags_3>
<background:BKG_TAG_MENU_3><character:CHR_NONE><animation:ANI_NONE>
<fade>


<!-- Tag menu 3 with cursor choice -->

<event:EVT_CLICK>
<box:2,8,9,3,1><jump:click_tagmenu3_music,0,1>
<box:12,8,8,3,1><jump:click_tagmenu3_bip,0,1>
<box:21,8,9,3,1><jump:click_tagmenu3_sound,0,1>
<box:2,12,9,3,1><jump:click_tagmenu3_shake,0,1>
<box:12,12,8,3,1><jump:click_tagmenu3_fade,0,1>
<box:21,12,9,3,1><jump:click_tagmenu3_flash,0,1>
<box:12,16,8,3,1><jump:click_tagmenu3_return,0,1>
<box:2,2,4,4,1><jump:click_tagmenu3_left,0,1>
<box:26,2,4,4,0><jump:click_tagmenu3_right,0,1>

<!-- Add fade before any jump -->

<label:click_tagmenu3_music>
<fade>
<jump:tag_todo_3>

<label:click_tagmenu3_bip>
<fade>
<jump:tag_todo_3>

<label:click_tagmenu3_sound>
<fade>
<jump:tag_todo_3>

<label:click_tagmenu3_shake>
<fade>
<jump:tag_todo_3>

<label:click_tagmenu3_fade>
<fade>
<jump:tag_todo_3>

<label:click_tagmenu3_flash>
<fade>
<jump:tag_todo_3>

<label:click_tagmenu3_left>
<fade>
<jump:text_tags_2>

<label:click_tagmenu3_right>
<fade>
<jump:text_tags_4>

<label:click_tagmenu3_return>
<fade>
<jump:textmenu>
<label:text_tags_4>
<background:BKG_TAG_MENU_4><character:CHR_NONE><animation:ANI_NONE>
<fade>


<!-- Tag menu 4 with cursor choice -->

<event:EVT_CLICK>
<box:2,8,13,3,1><jump:click_tagmenu4_label_jump,0,1>
<box:17,8,13,3,1><jump:click_tagmenu4_set_clear,0,1>
<box:2,12,6,3,1><jump:click_tagmenu4_act,0,1>
<box:9,12,14,3,1><jump:click_tagmenu4_save_return,0,1>
<box:24,12,6,3,1><jump:click_tagmenu4_angle,0,1>
<box:12,12,8,3,1><jump:click_tagmenu4_event,0,1>
<box:21,12,9,3,1><jump:click_tagmenu4_ext,0,1>
<box:12,16,8,3,1><jump:click_tagmenu4_return,0,1>
<box:2,2,4,4,1><jump:click_tagmenu4_left,0,1>
<box:26,2,4,4,0><jump:click_tagmenu4_right,0,1>

<!-- Add fade before any jump -->

<label:click_tagmenu4_label_jump>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_set_clear>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_act>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_save_return>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_angle>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_event>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_ext>
<fade>
<jump:tag_todo_4>

<label:click_tagmenu4_left>
<fade>
<jump:text_tags_3>

<label:click_tagmenu4_right>
<fade>
<jump:text_tags_1>

<label:click_tagmenu4_return>
<fade>
<jump:textmenu>
<label:imagemenu>
<background:BKG_IMAGE_MENU><character:CHR_NONE><animation:ANI_NONE>
<fade>

<!-- Image menu with cursor choice -->

<event:EVT_CLICK>
<box:3,8,11,3,1><jump:click_imagemenu_info,0,1>
<box:18,8,11,3,1><jump:click_imagemenu_bkg,0,1>
<box:3,12,11,3,1><jump:click_imagemenu_anim,0,1>
<box:18,12,11,3,1><jump:click_imagemenu_photo,0,1>
<box:3,16,11,3,1><jump:click_imagemenu_return,0,1>
<box:18,16,11,3,0><jump:click_imagemenu_other,0,1>

<!-- Add fade before any jump -->

<label:click_imagemenu_info>
<fade>
<jump:todo_image>

<label:click_imagemenu_bkg>
<fade>
<jump:todo_image>

<label:click_imagemenu_anim>
<fade>
<jump:todo_image>

<label:click_imagemenu_photo>
<fade>
<jump:todo_image>

<label:click_imagemenu_other>
<fade>
<jump:todo_image>

<label:click_imagemenu_return>
<fade>
<jump:mainmenu>
<label:musicmenu>
<background:BKG_MUSIC_MENU><character:CHR_NONE><animation:ANI_NONE>
<fade>

<!-- Music menu with cursor choice -->

<event:EVT_CLICK>
<box:3,8,11,3,1><jump:click_musicmenu_todo,0,1>
<box:18,8,11,3,1><jump:click_musicmenu_todo,0,1>
<box:3,12,11,3,1><jump:click_musicmenu_todo,0,1>
<box:18,12,11,3,1><jump:click_musicmenu_todo,0,1>
<box:3,16,11,3,0><jump:click_musicmenu_return,0,1>

<!-- Add fade before any jump -->

<label:click_musicmenu_todo>
<fade>
<jump:todo_music>

<label:click_musicmenu_return>
<fade>
<jump:mainmenu>
<label:END>
!!!END OF TEXT!!!
<jump:END>
<label:tag_b>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
        == B tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
The <color:GREEN>b<color:WHITE> tag is one<b>
of the most basic tag.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
When encountered,<b><wait:15>
the text will go to the<b>
start of the next line.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Why call it b ?<b><wait:30>
I Don't remember ?<b><wait:30>
For "break" maybe ?
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>


<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

This is a dialog<color:GREEN><<>b><color:WHITE><b>
with multiple lines<color:GREEN><<>b><color:WHITE><b>
of text.
<p><wait:5>


<name:NAM_NONE>
<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
The dialog box is 28<b>
characters wide.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
So try to use the tag before<b>
having this many characters<b>
on a line.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Unless you want to go for a<b>
glitchy effect with the text<b>
going out of the dialog box.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Be warn that unknow side<b>
effect (like crashing the<b>
game) may occure
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1><label:tag_color>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
      == Color tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
The <color:GREEN>color<color:WHITE> tag<b>
change the text color.<b>
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The color will remain the<b>
same until another <color:GREEN>color<color:WHITE><b>
tag is encounter.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The argument is the color<b>
to use. It can only take<b>
one of these number:
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
<color:RED>0<color:WHITE>: white (default)<b>
<color:RED>1<color:WHITE>: red      <color:RED>2<color:WHITE>: blue<b>
<color:RED>3<color:WHITE>: green
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>


<name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

<color:1>RED, <color:2>BLUE,<b>
<color:3>GREEN<color:0> and<b>
WHITE! Such colors!<p><wait:5>


<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
Use colors to emphasize<b>
important word or<b>
way of speaking
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
(For example: Ace Attorney<b>
use blue text when a<b>
character is thinking).
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<animation:ANI_ROBOT_NEUTRAL_TALK>
Note: For now, it is<b>
impossible to change colors<b>
without editing the code.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
<color:BLUE>Colors are mainly located<b>
and hard-coded in "asm/vecto<b>
r/scanline_pal_change.asm"<color:WHITE>
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
The reason is that it<b>
involve complex palette<b>
change mid-frame
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Which is very technical<b>
on the NES.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
I may refactor that a little<b>
in the future to change<b>
those number easily.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1><label:tag_comment>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
     == Comment tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
A comment tag start with<b>
<color:GREEN><<>!--<color:WHITE> and end when<b>
<color:GREEN>--><color:WHITE> is encountered.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
Everything inside a comment<b>
tag is ignored.<wait:30> They can be<b>
multiple lines long.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
Use it to make part of your<b>
script more clear to you<b>
and other people.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
Well, you will need to look<b>
at the source file to know<b>
what comment I put in there.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<!-- This is a comment -->

An actual dialog.<p><wait:5>

<!--
a comment with
multiple lines
-->


<name:NAM_NONE>
<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
Don't hesitate to use them,<b><wait:30>
really.<b>
<color:BLUE>(more than I do at least)<color:WHITE>
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
And don't also hesitate to<b>
space your text<b>
with newlines.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
It make it easier to read.<b>
Especially when a lot of<b>
tag is involved.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<hidetextbox><fade>
<jump:text_tags_1><label:tag_const>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
      == Const tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
This tag declare a constant<b>
value that you can use<b>
anywhere in the script.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
It has 2 arguments:<b>
the 1st is the constant name<b>
and the 2nd the value.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
To use the new constant,<b>
just write its name<b>
somewhere,
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
and it will be replaced by<b>
its value when you<b>
compile the script.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
It is useful if you want<b>
to put a name on your value.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Especially if you're using<b>
this value multiple times.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Because to change it,<wait:15> you<b>
will need to change all the<b>
places where it is used too.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
But you can replace them by<b>
a constant and only change<b>
the constant value.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

<const:_1SEC,60>
<const:_SMITH,Smith>

<<>const:_1SEC,60><b>
<<>const:_SMITH,M.Smith><p><wait:5>

Maybe I should tell<b>
_SMITH about it<b>
.<wait:_1SEC><<>wait:_1SEC>.<wait:_1SEC><<>wait:_1SEC>.<p><wait:5>


<name:NAM_NONE>
<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
Don't hesitate to use it.<b><wait:30>
It improves readability<b>
and make change easier.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
<color:BLUE>(<color:GREEN><<>name:MAIN_CHAR_NAME><color:BLUE> is<b>
more readable than<b>
<color:GREEN><<>name:45><color:BLUE>)<color:WHITE>
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Do not choose a name that<b>
you use in your dialogs<b>
otherwise it will be replace
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
For example, "player"<b>
is a bad choice,<animation:ANI_ROBOT_NEUTRAL_IDLE><wait:30><animation:ANI_ROBOT_SMILE_TALK> but<b>
"CONST_PLAYER" is better.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1><label:tag_name>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
       == Name tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
The <color:GREEN>name<color:WHITE> tag change the<b>
name at the bottom left<b>
of the dialog box.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
This tag take an argument<b>
that specify the new name.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The argument is a number<b>
that is the n'th name in the<b>
name list <color:BLUE>(more info after)<color:WHITE>.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
It is intended to indicate<b>
which character is speaking.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
You don't need to add this<b>
tag for every dialog box.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The name will only change<b>
when a new <color:GREEN><<>name><color:WHITE><b>
tag is encounter.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Note: It seems that changing<b>
a name to 0 only take effect<b>
at the next dialog box
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>


<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

<const:NAME_A,3>
<const:NAME_B,4>

<name:NAME_A>
I am the character A!<p>
<name:NAME_B>
And I am the character B!<p>


<name:NAM_NONE>
<color:RED><b>
   == Editing the list ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_NEUTRAL_TALK>
Changing the list is quite<b>
cumbersome for now.
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
To edit the list, you must<b>
change 2 things:<b>
Name address & Name tiles.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>


<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
   == Editing the list ==<b>
      -- Name tiles --
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
Name tiles are located in<b>
the file "data/FONT.chr".
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<background:BKG_1ST_CHR><hidetextbox><p><wait:5><hidetextbox>
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
There are at the<b>
bottom halves of<b>
the first bank,
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
without counting the last<b>
tiles representing the<b>
cursor & dialog box tiles.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_LOOKRIGHT_SMILE_TALK>
You can put any graphic you<b>
want as long as it fit into<b>
the designed name space.
<animation:ANI_ROBOT_LOOKRIGHT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Note that a name is X tile<b>
long and names must fit<b>
entirely into these tiles.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Important note: The first<b>
name necessary start at the<b>
1st tile in the name space.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Each name follow<b>
one after the other.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Also, the order of the names<b>
are important too for<b>
the next part.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>


<background:BKG_INTRO>
<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
   == Editing the list ==<b>
     -- Name Address --
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
You must indicate for<b>
each name the name tile<b>
it starts from.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
And to do that,<wait:15><b>
you use the<b>
name address list.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The name address list<b>
can be edited at<b>
"asm/dialog/name.asm".
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<background:BKG_NAMELIST><hidetextbox><p><wait:5><hidetextbox>
<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The list start after<b>
the line 'NAMES_ADR_LO:'<b>
(At the top of the file).
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
Each entry start as '.byte '<b>
followed by the tile number<b>
where the name start.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
(You can see this number in<b>
YYCHR on the bottom left<b>
when clicking on a tile)
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The first entry is<b>
always '.byte $80',
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
and other entry are always<b>
'.byte ' + the size in tiles<b>
of the last name
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
everything after ';' is a<b>
comment and is therefore<b>
ignored.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
The order of the list<b>
is important.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
It must be in the same order<b>
as the name in the CHR bank.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Technical note: Numbers<b>
should always increase<b>
and not decrease,
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
otherwise the code<b>
will not work.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>


<background:BKG_INTRO>
<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
You can use a name with<b>
a value of 0<b>
to hide the name.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
It may also be possible<b>
to not write a name,<b>
but graphic instead.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
This can be used to draw<b>
symbols & graphics where the<b>
name should be displayed.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1><label:tag_p_fp>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
      == P & FP tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
The <color:GREEN>p<color:WHITE> tag is one<b>
of the most basic tag.<b>
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
When encountered,<b><wait:15>
it indicates the end<b>
of a dialog box.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
It also waits for the user<b>
to press A to go<b>
to the next one.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The <color:GREEN>fp<color:WHITE> tag do the same thing<b>
but does not wait<b>
for an input
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
Why call it p ?<b><wait:30>
I don't remember ?<b><wait:30>
For "page"/"press" maybe ?
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_NEUTRAL_TALK>
And the f in fp<b>
may be for "force" ?
<animation:ANI_ROBOT_NEUTRAL_IDLE><p><wait:5>


<animation:ANI_ROBOT_SMILE_IDLE><name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

This is the dialog<b>
before you press A<color:GREEN><<>p><color:WHITE><p><wait:5>

And This is the dialog<b>
after you press A<color:GREEN><<>p><color:WHITE><p><wait:5>

This is the dialog for--<color:GREEN><<>fp><color:WHITE><fp><wait:5>
Nop! No time for that!<color:GREEN><<>p><color:WHITE><p><wait:5>


<name:NAM_NONE>
<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
You can use <color:GREEN>p<color:WHITE> to just wait<b>
for an input. You don't need<b>
to have a dialog displayed.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
This can be used for some<b>
effect like displaying<b>
a background one by one.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
Or something more<b>
interesting that need<b>
a player input.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
You can use <color:GREEN>fp<color:WHITE> to create<b>
an element of surprise,
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
like having a dialog that<b>
is really fast<b>
and skip itself,
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
or force the dialog<b>
to be time with<b>
something else like music.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Be careful if you want your<b>
player to read a text<b>
before this tag.
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_NEUTRAL_TALK>
Make sure to give them<b>
enough time to do so<b>
(maybe with <color:GREEN>speed<color:WHITE> or <color:GREEN>wait<color:WHITE>)
<animation:ANI_ROBOT_TEACH_NEUTRAL_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1>
<label:tag_speed>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
      == Speed tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
This tag change how fast<b>
the text is displaying.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
The text will remain at<b>
this speed until another<b>
<color:GREEN>speed<color:WHITE> tag is encounter.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
It takes 1 number<b>
as an argument.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
This number is the number of<b>
frame to wait between each<b>
character displayed.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
So the smaller the value,<b>
the faster the text.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The game is normally at 60<b>
FPS. A speed of 60=1 second<b>
between each character.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

<speed:8>Slow text<b>
<speed:4>Normal text<b>
<speed:2>Fast text<b>


<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
Don't hesitate to use this<b>
tag to pace your dialog.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
You can also use a slow/fast<b>
speed to represent a<b>
character way of speech.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_TEACH_SMILE_TALK>
You can use a speed of 0 to<b>
have instant dialog.<b>
<color:BLUE>(When it will be fix)<color:WHITE>
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1><label:todo_image>
<background:BKG_EMPTY><character:CHR_NONE><animation:ANI_NONE>
<fade>
<hidetextbox>
TODO<p>
<hidetextbox>
<fade>
<jump:imagemenu>

<label:todo_music>
<background:BKG_EMPTY><character:CHR_NONE><animation:ANI_NONE>
<fade>
<hidetextbox>
TODO<p>
<hidetextbox>
<fade>
<jump:musicmenu>

<label:tag_todo_1>
<background:BKG_EMPTY><character:CHR_NONE><animation:ANI_NONE>
<fade>
<hidetextbox>
TODO<p>
<hidetextbox>
<fade>
<jump:text_tags_1>

<label:tag_todo_2>
<background:BKG_EMPTY><character:CHR_NONE><animation:ANI_NONE>
<fade>
<hidetextbox>
TODO<p>
<hidetextbox>
<fade>
<jump:text_tags_2>

<label:tag_todo_3>
<background:BKG_EMPTY><character:CHR_NONE><animation:ANI_NONE>
<fade>
<hidetextbox>
TODO<p>
<hidetextbox>
<fade>
<jump:text_tags_3>

<label:tag_todo_4>
<background:BKG_EMPTY><character:CHR_NONE><animation:ANI_NONE>
<fade>
<hidetextbox>
TODO<p>
<hidetextbox>
<fade>
<jump:text_tags_4>
<label:tag_wait>
<background:BKG_INTRO><character:CHR_ROBOT><animation:ANI_ROBOT_SMILE_IDLE>
<fade><hidetextbox>


<name:NAM_NONE>
<color:RED><b>
       == Wait tag ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
This tag wait for<b>
a number of frames to pass.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
It takes 1 number as an<b>
argument, and it is the<b>
number of frame to wait.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
So the bigger the value,<b>
the longer you wait.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
The game is normally at 60<b>
FPS. A wait of 60 mean that<b>
the game will wait 1 second.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<name:NAM_NONE>
<color:RED><b>
       == Example ==<b>
<color:WHITE><p><wait:5>

Wait I'm thinking...<b>
<wait:40><<>wait:40>OK I'm done<b>
Wait!<wait:100><<>wait:100>Nothing :)<p>


<name:NAM_NONE>
<color:RED><b>
         == Tips ==<b>
<color:WHITE><p><wait:5>

<name:NAM_SAFYRUS><animation:ANI_ROBOT_SMILE_TALK>
This tag is great for<b>
timing things, obviously.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
But it can also be used to<b>
add small pauses between<b>
sentences and clauses.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
This give a feel of<b>
a more natural dialog.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
If you combine a speed of 0<b>
(with <color:GREEN>speed<color:WHITE>) and add a<b>
wait time after each word,
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_TEACH_SMILE_TALK>
you can display text<b>
word by word instead of<b>
character by character.
<animation:ANI_ROBOT_TEACH_SMILE_IDLE><p><wait:5>

<animation:ANI_ROBOT_SMILE_TALK>
This can give a robotic<b>
feeling to the dialog.
<animation:ANI_ROBOT_SMILE_IDLE><p><wait:5>


<hidetextbox><fade>
<jump:text_tags_1>