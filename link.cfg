MEMORY {
    ZP:      start = $0000, size = $0100,  type = rw,                                       define = yes;
    OAM:     start = $0200, size = $0100,  type = rw,                                       define = yes;
    FMS:     start = $0300, size = $0200,  type = rw,                                       define = yes;
    RAM:     start = $0500, size = $0300,  type = rw,                                       define = yes;
    RAMBNK:  start = $6000, size = $2000,  type = rw;
 
    HEADER:  start = $0000, size = $0010,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_ASM: start = $8000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_SFX: start = $8000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_MUS0:start = $A000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_MUS1:start = $A000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_DPCM:start = $C000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_EVI: start = $A000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_ANI: start = $C000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_IMG: start = $A000, size = $62000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK_TXT: start = $A000, size = $8E000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    BNK127:  start = $E000, size = $2000,  type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    CHR:     start = $0000, size = $100000,type = ro, file = %O, fill = yes, fillval = $00, define = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,  type = ro;
 
    CODE:     load = BNK127,  type = ro,  define = yes;
 
    MMC5_RAM: load = RAMBNK,  type = bss, optional = yes;
 
    CODE_BNK: load = BNK_ASM, type = ro;
    ANIM_BNK: load = BNK_ANI, type = ro;
    TXT_BNK : load = BNK_TXT, type = ro;
    IMGS_BNK: load = BNK_IMG, type = ro;
    EVI_BNK : load = BNK_EVI, type = ro;
    MUS_BNK0: load = BNK_MUS0,type = ro;
    MUS_BNK1: load = BNK_MUS1,type = ro;
    SFX_BNK : load = BNK_SFX, type = ro;
    DPCM_BNK: load = BNK_DPCM,type = ro;
    LAST_BNK: load = BNK127,  type = ro;
    VECTORS:  load = BNK127,  type = ro,  start = $FFFA;
 
    OAM:      load = OAM,     type = rw;
    FMS_RAM:  load = FMS,     type = bss, define = yes;
    BSS:      load = RAM,     type = bss, define = yes;
    ZEROPAGE: load = ZP,      type = zp;
 
    CHARS:    load = CHR,     type = ro;
}
